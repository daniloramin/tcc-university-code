Estrutura do projeto: 
    Index
    Routes
    Controllers
    Modules
    Validators?

Funcionalidades do projeto: 
    - Auth
        Register
            Falta refatorar e pensar em tratamento de dados

        Login
            Falta refatorar e utilizar o jwt

        Continuous access after login
        
        Logout

    
    - User
        Profile
        Customize Profile (description, profile picture...)
        Update Account
            Falta fazer o retorno do usuário atualizado. Foi feito com findByIdAndUpdate e retorna o resultado de findById. Procurar uma forma melhor
            Falta pensar em validação de campos

        Delete Account
    
    - DMs
        Customize background?
        DM Messages
    
    - Groups
        Customize description
        Customize background
        Customize profile picture
        Group Messages




Rotas no insomnia: 
    get - Logout
    get - free
    post - createAccount
    post - login
    put - updateAccount
    delete - deleteAccount



Regras de negócio:
    Deve haver 3 hierarquias: aluno, professor, coordenador
    Aluno:
        deve conseguir criar uma conta na universidade
        deve conseguir solicitar matricula em um curso (o coordenador que irá matricular o aluno)
        deve conseguir atualizar seus dados pessoais: nome, sobrenome, telefone
        deve conseguir ver seus dados de matrícula
        deve conseguir ver as notas de todas as materias que já teve nos semestres anteriores
        deve conseguir ver as notas do semestre atual
    
    Professor:
        só pode ser registrado na universidade por um adm
        só pode ser registrado em uma turma por um coordenador ou adm
        deve conseguir atualizar seus dados pessoais: nome, sobrenome, telefone
        deve conseguir ver seus dados de registro
        deve conseguir ver as turmas em que leciona
        deve conseguir dar notas somente aos alunos das diciplinas que leciona

    Coordenador:
        só pode ser registrado na universidade por uma adm
        só pode ser registrado em um curso por um adm
        deve consguir atualizar seus dados pessoais: nome, sobrenome, telefone
        deve conseguir ver seus dados de registro
        deve conseguir ver as turmas do curso que coordena
        deve conseguir dar/alterar notas somente aos alunos do curso que coordena
        deve conseguir matricular os alunos no curso
        deve conseguir designar um professor para uma turmas
    
    ADM:
        Deve conseguir criar outros ADMs
        Deve conseguir criar um aluno
        Deve conseguir atualizar um aluno
        Deve conseguir criar um professor
        Deve conseguir atualizar um professor
        Deve conseguir criar um coordenador
        Deve conseguir atualizar um coordenador
        Tem controle total sobre o crud da aplicação.





aluno:
    dados:
        hierarquia:str - aluno(simples)
        nome:str
        sobrenome:str
        telefone:str
        email:str
        senha:str
        numero de registro:str
        curso:str
        turma:str
        notas e materias:arr[{materia:str, nota:float}]
    metodos:
        requestEnrollment
        update
        getAllInfosByRegistrationNumber
        getContactInfoByRegistrationNumber
        getCourseInfoByRegistrationNumber
        
        


professor:
    dados:
        hierarquia:str - professor(medio)
        nome:str
        sobrenome:str
        telefone:str
        email:str
        senha:str
        pis:str
        turmas:arr[turma:str, materia:str]
    metodos:
        update
        getByRegistrationNumber or pisNumber
        getClasses
        getStudentsByClass?
        putCourseGrade



cordenador:
    dados:
        hierarquia:str - coordenador(alto)
        nome:str
        sobrenome:str
        telefone:str
        email:str
        senha:str
        pis:str
        curso:str
    metodos:
        update
        getByRegistrationNumber
        getAllClasses
        getAllStudentsByCourse
        putCourseGrade
        enrollStudent

Admin:
    dados:
        hierarquia:str - adm
        nome:str
        sobrenome:str
        telefone:str
        email:str
        senha:str
    methods:
        update
        updateAnyone
        getStudent
        getAllStudents
        getTeacher
        getAllTeachers
        getCoordinator
        getAllCoordinators

    

Rotas:
    /auth/
    /aluno/
    /professor/
    /coordenador/


Foi criado um banco de dados no mongodb atlas para fazer a conexão.